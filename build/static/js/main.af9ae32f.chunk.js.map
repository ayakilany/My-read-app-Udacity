{"version":3,"sources":["EachBook.js","ShelfMain.js","ListOfBook.js","BooksAPI.js","SearchResult.js","AddAndSearch.js","App.js","index.js"],"names":["EachBook","handleupdate","book","className","style","width","height","backgroundImage","imageLinks","thumbnail","defaultValue","shelf","onChange","e","target","value","disabled","title","authors","protoTypes","PropTypes","func","isRequired","array","ShelfMain","listBook","name","filter","b","replace","toLowerCase","map","idustryIdentifiers","ListOfBook","bookShelfs","s","id","to","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","SearchResult","searches","searchQuery","includes","AddAndSearch","useState","setSearches","setSearchQuery","useEffect","cleaner","a","query","maxResults","BooksAPI","fetch","method","body","JSON","stringify","then","res","json","data","books","result","error","concat","console","log","type","placeholder","event","preventDefault","App","navigate","useNavigate","updateShelf","newshelf","setListBook","exact","path","element","shelfname","ReactDOM","render","document","getElementById"],"mappings":"ySACMA,EAAW,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,KAChC,OACE,6BACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBACEA,UAAU,aACVC,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAiBL,EAAKM,WAAL,cACNN,EAAKM,WAAWC,UADV,KAEb,UAGR,qBAAKN,UAAU,qBAAf,SACE,yBACEO,aAAcR,EAAKS,MAAQT,EAAKS,MAAQ,OACxCC,SAAU,SAACC,GAAD,OAAOZ,EAAaC,EAAMW,EAAEC,OAAOC,QAF/C,UAIE,wBAAQC,UAAQ,EAAhB,wBACA,wBAAQD,MAAM,mBAAd,+BACA,wBAAQA,MAAM,aAAd,0BACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,0BAIN,qBAAKZ,UAAU,aAAf,SAA6BD,EAAKe,QACjCf,EAAKgB,QACJ,qBAAKf,UAAU,eAAf,SAA+BD,EAAKgB,QAAUhB,EAAKgB,QAAU,KAE7D,qBAAKf,UAAU,uBAMzBH,EAASmB,WAAa,CACpBlB,aAAcmB,IAAUC,KAAKC,WAC7BpB,KAAMkB,IAAUG,MAAMD,YAETtB,QCzCTwB,EAAY,SAAC,GAAuC,IAArCb,EAAoC,EAApCA,MAAOc,EAA6B,EAA7BA,SAAUxB,EAAmB,EAAnBA,aAIpC,OACE,qBAAKE,UAAU,qBAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCQ,EAAMe,OACvC,qBAAKvB,UAAU,kBAAf,SACE,oBAAIA,UAAU,aAAd,SACGsB,EACEE,QACC,SAACC,GAAD,OACEA,EAAEjB,MAAMkB,QAAQ,MAAO,IAAIC,gBAC3BnB,EAAMe,KAAKG,QAAQ,MAAO,IAAIC,iBAEjCC,KAAI,SAAC7B,GAAD,OACH,cAAC,EAAD,CAAWA,KAAMA,EAAMD,aAAcA,GAAmBC,EAAK8B,iCAQ7ER,EAAUL,WAAa,CACrBlB,aAAcmB,IAAUC,KAAKC,YAEhBE,QC3BTS,EAAa,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,WAAYT,EAA6B,EAA7BA,SAAUxB,EAAmB,EAAnBA,aAE1C,OACE,qBAAKE,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,2CAED+B,EAAWH,KAAI,SAACI,GAAD,OACd,cAAC,EAAD,CACExB,MAAOwB,EAEPV,SAAUA,EACVxB,aAAcA,GAFTkC,EAAEC,OAKX,qBAAKjC,UAAU,cAAf,SACE,cAAC,IAAD,CAAMkC,GAAG,UAAT,yBAMVJ,EAAWd,WAAa,CACtBlB,aAAcmB,IAAUC,KAAKC,YAEhBW,Q,QC7BTK,EAAM,wCAERC,EAAQC,aAAaD,MAEpBA,IAAOA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAE5E,IAAMC,EAAU,CACdC,OAAQ,mBACRC,cAAeR,GCwBES,EA7BA,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,SAAShD,EAAqC,EAArCA,aAAaiD,EAAwB,EAAxBA,YAAwB,EAAZzB,SASvD,OACO,qBAAKtB,UAAU,uBAAf,SACP,oBAAIA,UAAU,aAAd,SACC8C,EAAStB,QAAO,SAACC,GAAD,OAAKA,EAAEX,MAAMa,cAAcqB,SAASD,EAAYpB,kBAChEC,KAAI,SAAC7B,GAAD,OACL,cAAC,EAAD,CACAA,KAAMA,EAEND,aAAcA,GADTC,EAAK8B,4BCmDKoB,EA9DM,SAAC,GAGf,IAFL3B,EAEI,EAFJA,SAAUxB,EAEN,EAFMA,aAEN,EAC4BoD,mBAAS,IADrC,mBACGJ,EADH,KACaK,EADb,OAEkCD,mBAAS,IAF3C,mBAEGH,EAFH,KAEgBK,EAFhB,KAgCJ,OAvBAC,qBAAU,WACR,IAAIC,GAAU,EAgBd,OAfU,uCAAG,4BAAAC,EAAA,yDACS,KAAhBR,EADO,gCFSMS,EEPsBT,EFOfU,OEPDC,EFQ3BC,MAAM,GAAD,OAAIxB,EAAJ,WAAkB,CACrByB,OAAQ,OACRlB,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElBmB,KAAMC,KAAKC,UAAU,CAAEP,QAAOC,iBAE7BO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUA,EAAKC,SEnBR,QAEHC,EAFG,QAGEC,MACTnB,EAAY,IAGRG,IACFH,EAAY7B,EAASiD,OAAOF,IAC5BG,QAAQC,IAAIJ,IATP,iCFSK,IAACb,EAAOC,IETb,OAAH,oDAcV1D,GACO,WACLuD,GAAU,EACVH,EAAY,OAEb,CAACJ,IAGF,8BACE,sBAAK/C,UAAU,eAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,cAAC,IAAD,CAAMkC,GAAG,IAAIlC,UAAU,eAAvB,mBAGA,qBAAKA,UAAU,6BAAf,SACE,uBACE0E,KAAK,OACLC,YAAY,6BACZ/D,MAAOmC,EACPtC,SAAU,SAACmE,GAxCF,IAAClE,KAyCKkE,GAxCvBC,iBACFzB,EAAe1C,EAAEC,OAAOC,eA4CpB,cAAC,EAAD,CAAckC,SAAUA,EAAUhD,aAAcA,EAAciD,YAAaA,EAAazB,SAAUA,UCS3FwD,MA/Df,WACE,IAAIC,EAAWC,cAUTlF,EAAe,SAAC2B,EAAGmD,GACvBnD,EAAEjB,MAAQoE,EACVK,EAAYxD,EAAGmD,IAEXK,EAAc,SAACxD,EAAGO,IACR,uCAAG,sBAAAuB,EAAA,sEHFExD,EGGK0B,EHHCjB,EGGEwB,EHF7B2B,MAAM,GAAD,OAAIxB,EAAJ,kBAAiBpC,EAAKkC,IAAM,CAC/B2B,OAAQ,MACRlB,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElBmB,KAAMC,KAAKC,UAAU,CAAEvD,YACtBwD,MAAK,SAACC,GAAD,OAASA,EAAIC,UGNF,iCHFC,IAACnE,EAAMS,IGER,OAAH,qDAGd0E,GACAH,EAAS,MApBE,EAyBmB7B,mBAAS,IAzB5B,mBAyBN5B,EAzBM,KAyBI6D,EAzBJ,KAsCb,OAXA9B,qBAAU,WAOR,OANU,uCAAG,4BAAAE,EAAA,sEHlBfI,MAAM,GAAD,OAAIxB,EAAJ,UAAiB,CAAEO,YACrBsB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUA,EAAKC,SGgBR,OACLC,EADK,OAGXc,EAAYd,GAHD,2CAAH,oDAKVtE,GACM,WACNoF,EAAY,OACZ,IAIA,cADA,CACC,IAAD,WACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,QACE,cAAC,EAAD,CACEvD,WA1CS,CACjB,CAAER,KAAM,oBAAqBU,GAAI,EAAGsD,UAAW,oBAC/C,CAAEhE,KAAM,eAAgBU,GAAI,EAAGsD,UAAW,cAC1C,CAAEhE,KAAM,OAAQU,GAAI,EAAGsD,UAAW,SAwC1BjE,SAAUA,EACVxB,aAAcA,MAIpB,cAAC,IAAD,CACEuF,KAAK,UACLC,QACE,cAAC,EAAD,CAAgBhE,SAAUA,EAAUxB,aAAcA,UCxD5D0F,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.af9ae32f.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nconst EachBook = ({ handleupdate, book }) => {\r\n  return (\r\n    <li>\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          <div\r\n            className=\"book-cover\"\r\n            style={{\r\n              width: 128,\r\n              height: 193,\r\n              backgroundImage: book.imageLinks\r\n                ? `url(${book.imageLinks.thumbnail})`\r\n                : \"none\",\r\n            }}\r\n          ></div>\r\n          <div className=\"book-shelf-changer\">\r\n            <select\r\n              defaultValue={book.shelf ? book.shelf : \"none\"}\r\n              onChange={(e) => handleupdate(book, e.target.value)}\r\n            >\r\n              <option disabled>Move to...</option>\r\n              <option value=\"currentlyReading\">Currently Reading</option>\r\n              <option value=\"wantToRead\">Want to Read</option>\r\n              <option value=\"read\">Read</option>\r\n              <option value=\"none\">None</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"book-title\">{book.title}</div>\r\n        {book.authors ? (\r\n          <div className=\"book-authors\">{book.authors ? book.authors : \"\"}</div>\r\n        ) : (\r\n          <div className=\"book-authors\"></div>\r\n        )}\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\nEachBook.protoTypes = {\r\n  handleupdate: PropTypes.func.isRequired,\r\n  book: PropTypes.array.isRequired,\r\n};\r\nexport default EachBook;\r\n","import PropTypes from \"prop-types\";\r\nimport EachBook from \"./EachBook\";\r\nconst ShelfMain = ({ shelf, listBook, handleupdate }) => {\r\n  //shelf page each shelf will be display with the map method using it in ListOfBook file\r\n  //filtering the book to replace each one in his shelf\r\n  //select option onchange will call the func handleupdate to update the shelf\r\n  return (\r\n    <div className=\"list-books-content\">\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{shelf.name}</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n            {listBook\r\n              .filter(\r\n                (b) =>\r\n                  b.shelf.replace(/ +/g, \"\").toLowerCase() ===\r\n                  shelf.name.replace(/ +/g, \"\").toLowerCase()\r\n              )\r\n              .map((book) => (\r\n                <EachBook  book={book} handleupdate={handleupdate} key={book.idustryIdentifiers}/>\r\n              ))}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nShelfMain.protoTypes = {\r\n  handleupdate: PropTypes.func.isRequired,\r\n};\r\nexport default ShelfMain;\r\n","import { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport ShelfMain from \"./ShelfMain\";\r\nconst ListOfBook = ({ bookShelfs, listBook, handleupdate }) => {\r\n  //this is the main page\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"list-books\">\r\n        <div className=\"list-books-title\">\r\n          <h1>MyReads</h1>\r\n        </div>\r\n        {bookShelfs.map((s) => (\r\n          <ShelfMain\r\n            shelf={s}\r\n            key={s.id}\r\n            listBook={listBook}\r\n            handleupdate={handleupdate}\r\n          />\r\n        ))}\r\n        <div className=\"open-search\">\r\n          <Link to=\"/search\">Add</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nListOfBook.protoTypes = {\r\n  handleupdate: PropTypes.func.isRequired,\r\n};\r\nexport default ListOfBook;\r\n","const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\nlet token = localStorage.token;\r\n\r\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\nexport const search = (query, maxResults) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query, maxResults }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n","import EachBook from \"./EachBook\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SearchResult=({searches,handleupdate,searchQuery,listBook})=>{\r\n/*let arr=[];\r\nfor(let i=0;i<searches.length;i++){\r\n    for(let j=0;j<listBook.length;j++){\r\n        if(searches[j].id===listBook[i].id){\r\n            arr.push(listBook[i])\r\n        }else{arr.push(searches[j])}\r\n    }\r\n}*/\r\nreturn(        \r\n       <div className=\"search-books-results\">\r\n<ol className=\"books-grid\">\r\n{searches.filter((b)=>b.title.toLowerCase().includes(searchQuery.toLowerCase()))\r\n.map((book) => (\r\n<EachBook\r\nbook={book}\r\nkey={book.idustryIdentifiers}\r\nhandleupdate={handleupdate}\r\n/>\r\n))\r\n}\r\n</ol>\r\n</div>)\r\n\r\n}\r\nSearchResult.propTypes = {\r\n    searches: PropTypes.array.isRequired,\r\n    handleupdate: PropTypes.func.isRequired,\r\n};\r\n    export default SearchResult;","import PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport SearchResult from \"./SearchResult\";\r\n//the add button will display this page with a search bar\r\n// when searching for a book with title or author will be shown on the page\r\n//when select a different shelf will call the handleupdate func to update the shelf\r\nconst AddAndSearch = ({\r\n  listBook, handleupdate\r\n\r\n}) => {\r\n  const [searches, setSearches] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    setSearchQuery(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let cleaner = true;\r\n    const book = async () => {\r\n      if (searchQuery !== \"\") {\r\n        const result = await BooksAPI.search(searchQuery);\r\n        if (result.error) {\r\n          setSearches([])\r\n        }\r\n        else {\r\n          if (cleaner) {\r\n            setSearches(listBook.concat(result))\r\n            console.log(result)\r\n          }\r\n        }\r\n      }\r\n    };\r\n    book();\r\n    return () => {\r\n      cleaner = false;\r\n      setSearches([])\r\n    }\r\n  }, [searchQuery]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link to=\"/\" className=\"close-search\">\r\n            Close\r\n          </Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title, or author\"\r\n              value={searchQuery}\r\n              onChange={(event) => {\r\n                handleSearch(event);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <SearchResult searches={searches} handleupdate={handleupdate} searchQuery={searchQuery} listBook={listBook} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nAddAndSearch.propTypes = {\r\n  listBook: PropTypes.array.isRequired,\r\n  handleupdate: PropTypes.func.isRequired,\r\n};\r\nexport default AddAndSearch;\r\n","import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\r\nimport ListOfBook from \"./ListOfBook\";\r\nimport AddAndSearch from \"./AddAndSearch\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\n\r\nfunction App() {\r\n  let navigate = useNavigate();\r\n\r\n\r\n  const bookShelfs = [\r\n    { name: \"Currently Reading\", id: 1, shelfname: \"currentlyReading\" },\r\n    { name: \"Want to Read\", id: 2, shelfname: \"wantToRead\" },\r\n    { name: \"Read\", id: 3, shelfname: \"read\" },\r\n  ];\r\n\r\n  //updating the shelf of the book when selected another one\r\n  const handleupdate = (b, event) => {\r\n    b.shelf = event;\r\n    updateShelf(b, event);\r\n  };\r\n  const updateShelf = (b, s) => {\r\n    const newshelf = async () => {\r\n      await BooksAPI.update(b, s);\r\n    };\r\n    newshelf();\r\n    navigate(\"/\");\r\n  };\r\n\r\n \r\n  //initilaize list of books to empty arry\r\n  const [listBook, setListBook] = useState([]);\r\n  //get all books and set the list of book with results\r\n  useEffect(() => {\r\n    const book = async () => {\r\n      const result = await BooksAPI.getAll();\r\n     \r\n      setListBook(result);\r\n    };\r\n    book();\r\n    return()=>{\r\n    setListBook([])}\r\n  },[]);\r\n\r\n  return (\r\n    //using routes to navigate between pages and updating the url\r\n    <Routes>\r\n      <Route\r\n        exact\r\n        path=\"/\"\r\n        element={\r\n          <ListOfBook\r\n            bookShelfs={bookShelfs}\r\n            listBook={listBook}\r\n            handleupdate={handleupdate}\r\n          />\r\n        }\r\n      />\r\n      <Route\r\n        path=\"/search\"\r\n        element={\r\n          <AddAndSearch   listBook={listBook} handleupdate={handleupdate} \r\n          />\r\n        }\r\n      />\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}